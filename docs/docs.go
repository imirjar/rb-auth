// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "email": "support@redbeaver.ru"
        },
        "license": {
            "name": "GNU GPL",
            "url": "https://fsf.org/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Authentificate user by login and password and retrun JWT if ok",
                "tags": [
                    "JWT"
                ],
                "summary": "Get user JWT",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "user isn't correct",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "user isn't valid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/signin": {
            "post": {
                "description": "Add new user login and password",
                "tags": [
                    "JWT"
                ],
                "summary": "Registrate new user",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "user isn't correct",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/token/refresh": {
            "post": {
                "description": "Send your JWT to prolongate your JWT expired period",
                "tags": [
                    "JWT"
                ],
                "summary": "Refresh user JWT",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "user isn't correct",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "user isn't valid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/token/validate": {
            "post": {
                "description": "Authentificate user by login and password and retrun JWT if ok",
                "tags": [
                    "JWT"
                ],
                "summary": "Validate user JWT",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "user isn't correct",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "user isn't valid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.User": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "user"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "RB_AUTH API",
	Description:      "Simple JWT auth.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

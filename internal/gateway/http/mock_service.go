// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imirjar/rb-auth/internal/gateway/http (interfaces: Service)

// Package http is a generated GoMock package.
package http

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/imirjar/rb-auth/internal/models"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BuildJWTString mocks base method.
func (m *MockService) BuildJWTString(arg0 context.Context, arg1 models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildJWTString", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildJWTString indicates an expected call of BuildJWTString.
func (mr *MockServiceMockRecorder) BuildJWTString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildJWTString", reflect.TypeOf((*MockService)(nil).BuildJWTString), arg0, arg1)
}

// Registrate mocks base method.
func (m *MockService) Registrate(arg0 context.Context, arg1 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registrate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Registrate indicates an expected call of Registrate.
func (mr *MockServiceMockRecorder) Registrate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registrate", reflect.TypeOf((*MockService)(nil).Registrate), arg0, arg1)
}
